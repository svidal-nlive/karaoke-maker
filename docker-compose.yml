# version: "3.9"

services:
  # ————————————————————— Redis —————————————————————
  redis:
    image: redis:8-alpine
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --save 60 1
    volumes:
      - redis-data:/data
    networks:
      - backend

  # ————————————————————— API —————————————————————
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - redis
      - cloudflared
    networks:
      - backend
    volumes:
      - ./pipeline-data/input:/input
      - ./pipeline-data/output:/output
      - ./pipeline-data/queue:/queue
      - ./pipeline-data/metadata:/metadata
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ————————————————————— Watcher —————————————————————
  watcher:
    build:
      context: .
      dockerfile: watcher/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/input:/input
      - ./pipeline-data/queue:/queue

  # ————————————————————— Metadata extractor —————————————————————
  metadata:
    build:
      context: .
      dockerfile: metadata/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - watcher
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/queue:/queue
      - ./pipeline-data/metadata:/metadata
      - ./pipeline-data/assets:/assets

  # ————————————————————— Stem splitter —————————————————————
  splitter:
    build:
      context: .
      dockerfile: splitter/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - metadata
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/queue:/queue
      - ./pipeline-data/stems:/stems
      - ./pretrained_models:/app/pretrained_models

  # ————————————————————— Packager —————————————————————
  packager:
    build:
      context: .
      dockerfile: packager/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - splitter
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/queue:/queue
      - ./pipeline-data/stems:/stems
      - ./pipeline-data/metadata:/metadata
      - ./pipeline-data/output:/output
      - ./pipeline-data/assets:/assets

  # ————————————————————— Dashboard (static + nginx) —————————————————————
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: https://kapi.vectorhost.net/api
    depends_on:
      api:
        condition: service_started
    networks:
      - backend

  # ————————————————————— Cloudflare Tunnel —————————————————————
  # This service requires a Cloudflare Tunnel token to be set in the .env file.
  # Make sure to set CF_TOKEN in your .env file.
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: karaoke-maker-tunnel
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${CF_TOKEN}
    networks:
      - backend

networks:
  backend:
    name: backend

volumes:
  redis-data:
    name: karaoke-maker-redis-data

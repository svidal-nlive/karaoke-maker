# version: "3.9"

services:
  # ————————————————————— Caddy Reverse Proxy —————————————————————
  # caddy:
  #   image: caddy:2-alpine
  #   restart: unless-stopped
  #   ports:
  #     - "7080:80"
  #     - "7443:443"
  #   volumes:
  #     - ./Caddyfile:/etc/caddy/Caddyfile
  #     - caddy_data:/data
  #     - caddy_config:/config
  #     - caddy_logs:/var/log/caddy
  #   networks:
  #     - backend
  #     - frontend
  #   depends_on:
  #     - api

  # ————————————————————— Redis —————————————————————
  redis:
    image: redis:8-alpine
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "6379:6379"
    networks:
      - backend

  # ————————————————————— API —————————————————————
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/input:/input
      - ./pipeline-data/output:/output
      - ./pipeline-data/queue:/queue
      - ./pipeline-data/metadata:/metadata
    environment:
      - VIRTUAL_HOST=kapi.vectorhost.net
      - VIRTUAL_PORT=5000
      - LETSENCRYPT_HOST=kapi.vectorhost.net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ————————————————————— Watcher —————————————————————
  watcher:
    build:
      context: .
      dockerfile: watcher/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/input:/input
      - ./pipeline-data/queue:/queue

  # ————————————————————— Metadata extractor —————————————————————
  metadata:
    build:
      context: .
      dockerfile: metadata/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - watcher
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/queue:/queue
      - ./pipeline-data/metadata:/metadata
      - ./assets:/assets

  # ————————————————————— Stem splitter —————————————————————
  splitter:
    build:
      context: .
      dockerfile: splitter/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - metadata
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/queue:/queue
      - ./pipeline-data/stems:/stems
      - ./pretrained_models:/app/pretrained_models

  # ————————————————————— Packager —————————————————————
  packager:
    build:
      context: .
      dockerfile: packager/Dockerfile
      args:
        PUID: ${PUID:-1000}
        PGID: ${PGID:-1000}
    env_file: .env
    depends_on:
      - splitter
      - redis
    networks:
      - backend
    volumes:
      - ./pipeline-data/queue:/queue
      - ./pipeline-data/stems:/stems
      - ./pipeline-data/metadata:/metadata
      - ./pipeline-data/output:/output
      - ./assets:/assets

  # ————————————————————— Dashboard (static + nginx) —————————————————————
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: https://kapi.vectorhost.net/api
    depends_on:
      - api
    networks:
      - backend
    environment:
      - VIRTUAL_HOST=mydash.vectorhost.net
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=mydash.vectorhost.net

  # ————————————————————— Cloudflare Tunnel —————————————————————
  # This service requires a Cloudflare Tunnel token to be set in the .env file.
  # Make sure to set TUNNEL_TOKEN in your .env file.
  tunnel:
    container_name: karaoke-maker-tunnel
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    command: tunnel --config /etc/cloudflared/config.yml run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    networks:
      - backend
    volumes:
      - ./config/cloudflared:/etc/cloudflared:ro
    depends_on:
      api:
        condition: service_started
      dashboard:
        condition: service_started

networks:
  frontend:
    name: frontend
  backend:
    name: backend

volumes:
  caddy_data:
  caddy_config:
  caddy_logs:
